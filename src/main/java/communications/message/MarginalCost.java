package communications.message;

import de.dlr.gitlab.fame.protobuf.Agent.ProtoDataItem;
import de.dlr.gitlab.fame.protobuf.Agent.ProtoDataItem.Builder;
import de.dlr.gitlab.fame.time.TimeStamp;
import java.util.Comparator;
import agents.plantOperator.PowerPlantOperator;
import de.dlr.gitlab.fame.communication.message.DataItem;

/** Data covering supply marginal cost, typically generated by a {@link PowerPlantOperator} */
public class MarginalCost extends DataItem {
	public static Comparator<MarginalCost> byCostAscending = new Comparator<MarginalCost>() {
		@Override
		public int compare(MarginalCost m1, MarginalCost m2) {
			return Double.compare(m1.marginalCostInEURperMWH, m2.marginalCostInEURperMWH);
		}
	};
	/** the power potential, i.e. the power that could be produced */
	public final double powerPotentialInMW;
	/** the actual marginal cost value */
	public final double marginalCostInEURperMWH;
	/** power potential with errors - due to power forecast errors */
	public final double powerPotentialWithErrorsInMW;
	/** the unique Id of the producer */
	public final long producerUuid;
	/** the begin of the delivery interval */
	public final TimeStamp deliveryTime;

	/** Constructs a new {@link MarginalCost}; powerPotentialWithErrors := powerPotential
	 * 
	 * @param producerUuid the unique id of the power generation agent
	 * @param powerPotentialInMW the true power that the associated generation unit could produce in perfect foresight
	 * @param marginalCostInEURperMWH the true marginal cost for producing the offered energy in EUR per MWh
	 * @param deliveryTime the starting time at which the associated energy is to be delivered */
	public MarginalCost(long producerUuid, double powerPotentialInMW, double marginalCostInEURperMWH,
			TimeStamp deliveryTime) {
		this.producerUuid = producerUuid;
		this.powerPotentialInMW = powerPotentialInMW;
		this.marginalCostInEURperMWH = marginalCostInEURperMWH;
		this.deliveryTime = deliveryTime;
		this.powerPotentialWithErrorsInMW = powerPotentialInMW;
	}

	/** Construct copy of given {@link MarginalCost} with extra powerPotentialWithErrors
	 * 
	 * @param original to copy values from
	 * @param powerPotentialWithErrorsInMW to replace any previous value */
	public MarginalCost(MarginalCost original, double powerPotentialWithErrorsInMW) {
		this.producerUuid = original.producerUuid;
		this.marginalCostInEURperMWH = original.marginalCostInEURperMWH;
		this.deliveryTime = original.deliveryTime;
		this.powerPotentialInMW = original.powerPotentialInMW;
		this.powerPotentialWithErrorsInMW = powerPotentialWithErrorsInMW;
	}

	/** Mandatory for deserialisation of {@link DataItem}s
	 * 
	 * @param proto protobuf representation */
	public MarginalCost(ProtoDataItem proto) {
		this.producerUuid = proto.getLongValue(0);
		this.deliveryTime = new TimeStamp(proto.getLongValue(1));
		this.powerPotentialInMW = proto.getDoubleValue(0);
		this.marginalCostInEURperMWH = proto.getDoubleValue(1);
		this.powerPotentialWithErrorsInMW = proto.getDoubleValue(2);
	}

	@Override
	protected void fillDataFields(Builder builder) {
		builder.addLongValue(producerUuid);
		builder.addLongValue(deliveryTime.getStep());
		builder.addDoubleValue(powerPotentialInMW);
		builder.addDoubleValue(marginalCostInEURperMWH);
		builder.addDoubleValue(powerPotentialWithErrorsInMW);
	}

	@Override
	public String toString() {
		return "(" + powerPotentialInMW + " MW@" + marginalCostInEURperMWH + " ï¿½/MWh)";
	}
}